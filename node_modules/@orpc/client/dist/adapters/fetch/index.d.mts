import { StandardRequest, StandardLazyResponse } from '@orpc/standard-server';
import { ToFetchRequestOptions } from '@orpc/standard-server-fetch';
import { a as ClientContext, b as ClientOptions } from '../../shared/client.4TS_0JaO.mjs';
import { f as StandardLinkClient } from '../../shared/client.ds1abV85.mjs';
import { f as StandardRPCLinkOptions, g as StandardRPCLink } from '../../shared/client.ClwIM_ku.mjs';
import '@orpc/shared';

interface LinkFetchClientOptions<T extends ClientContext> extends ToFetchRequestOptions {
    fetch?: (request: Request, init: {
        redirect?: Request['redirect'];
    }, options: ClientOptions<T>, path: readonly string[], input: unknown) => Promise<Response>;
}
declare class LinkFetchClient<T extends ClientContext> implements StandardLinkClient<T> {
    private readonly fetch;
    private readonly toFetchRequestOptions;
    constructor(options: LinkFetchClientOptions<T>);
    call(request: StandardRequest, options: ClientOptions<T>, path: readonly string[], input: unknown): Promise<StandardLazyResponse>;
}

interface RPCLinkOptions<T extends ClientContext> extends StandardRPCLinkOptions<T>, LinkFetchClientOptions<T> {
}
/**
 * The RPC Link communicates with the server using the RPC protocol.
 *
 * @see {@link https://orpc.unnoq.com/docs/client/rpc-link RPC Link Docs}
 * @see {@link https://orpc.unnoq.com/docs/advanced/rpc-protocol RPC Protocol Docs}
 */
declare class RPCLink<T extends ClientContext> extends StandardRPCLink<T> {
    constructor(options: RPCLinkOptions<T>);
}

export { LinkFetchClient, RPCLink };
export type { LinkFetchClientOptions, RPCLinkOptions };
