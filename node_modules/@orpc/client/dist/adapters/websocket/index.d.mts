import { StandardRequest, StandardLazyResponse } from '@orpc/standard-server';
import { a as ClientContext, b as ClientOptions } from '../../shared/client.4TS_0JaO.mjs';
import { f as StandardLinkClient } from '../../shared/client.ds1abV85.mjs';
import { f as StandardRPCLinkOptions, g as StandardRPCLink } from '../../shared/client.ClwIM_ku.mjs';
import '@orpc/shared';

interface experimental_LinkWebsocketClientOptions {
    websocket: Pick<WebSocket, 'addEventListener' | 'send'>;
}
declare class experimental_LinkWebsocketClient<T extends ClientContext> implements StandardLinkClient<T> {
    private readonly peer;
    constructor(options: experimental_LinkWebsocketClientOptions);
    call(request: StandardRequest, _options: ClientOptions<T>, _path: readonly string[], _input: unknown): Promise<StandardLazyResponse>;
}

interface experimental_RPCLinkOptions<T extends ClientContext> extends Omit<StandardRPCLinkOptions<T>, 'url' | 'headers' | 'method' | 'fallbackMethod' | 'maxUrlLength'>, experimental_LinkWebsocketClientOptions {
}
/**
 * The RPC Link communicates with the server using the RPC protocol over WebSocket.
 *
 * @see {@link https://orpc.unnoq.com/docs/client/rpc-link RPC Link Docs}
 * @see {@link https://orpc.unnoq.com/docs/adapters/websocket WebSocket Adapter Docs}
 */
declare class experimental_RPCLink<T extends ClientContext> extends StandardRPCLink<T> {
    constructor(options: experimental_RPCLinkOptions<T>);
}

export { experimental_LinkWebsocketClient, experimental_RPCLink };
export type { experimental_LinkWebsocketClientOptions, experimental_RPCLinkOptions };
