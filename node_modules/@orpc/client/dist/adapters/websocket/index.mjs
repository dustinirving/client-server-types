import { ClientPeer } from '@orpc/standard-server-peer';
import '@orpc/shared';
import { c as StandardRPCLink } from '../../shared/client.DpICn1BD.mjs';
import '@orpc/standard-server';
import '../../shared/client.CRWEpqLB.mjs';

class experimental_LinkWebsocketClient {
  peer;
  constructor(options) {
    this.peer = new ClientPeer(options.websocket.send.bind(options.websocket));
    options.websocket.addEventListener("message", (event) => {
      this.peer.message(event.data);
    });
    options.websocket.addEventListener("close", () => {
      this.peer.close();
    });
  }
  async call(request, _options, _path, _input) {
    const response = await this.peer.request(request);
    return { ...response, body: () => Promise.resolve(response.body) };
  }
}

class experimental_RPCLink extends StandardRPCLink {
  constructor(options) {
    const linkClient = new experimental_LinkWebsocketClient(options);
    super(linkClient, { ...options, url: "orpc:/" });
  }
}

export { experimental_LinkWebsocketClient, experimental_RPCLink };
