import { MaybeOptionalOptions } from '@orpc/shared';
import { C as Context, R as Router } from '../../shared/server.DPWk5pjW.mjs';
import { i as StandardHandler } from '../../shared/server.eWLxY3lq.mjs';
import { F as FriendlyStandardHandleOptions } from '../../shared/server.QUe9N8P4.mjs';
import { S as StandardRPCHandlerOptions } from '../../shared/server.BRoxSiSC.mjs';
import '@orpc/client';
import '@orpc/contract';
import '@orpc/standard-server';
import '@orpc/client/standard';

interface ServerWebSocket {
    send(message: string | ArrayBufferLike): number;
}
declare class experimental_BunWsHandler<T extends Context> {
    private readonly standardHandler;
    private readonly peers;
    constructor(standardHandler: StandardHandler<T>);
    message(ws: ServerWebSocket, message: string | {
        buffer: ArrayBufferLike;
    }, ...rest: MaybeOptionalOptions<Omit<FriendlyStandardHandleOptions<T>, 'prefix'>>): Promise<void>;
    close(ws: ServerWebSocket): void;
}

/**
 * RPC Handler for Bun WS adapter
 *
 * @see {@link https://orpc.unnoq.com/docs/rpc-handler RPC Handler Docs}
 * @see {@link https://orpc.unnoq.com/docs/adapters/websocket Websocket Adapter Docs}
 */
declare class experimental_RPCHandler<T extends Context> extends experimental_BunWsHandler<T> {
    constructor(router: Router<any, T>, options?: NoInfer<StandardRPCHandlerOptions<T>>);
}

export { experimental_BunWsHandler, experimental_RPCHandler };
export type { ServerWebSocket };
