import { resolveMaybeOptionalOptions } from '@orpc/shared';
import { ServerPeer } from '@orpc/standard-server-peer';
import { r as resolveFriendlyStandardHandleOptions } from '../../shared/server.BVwwTHyO.mjs';
import '@orpc/client';
import '@orpc/contract';
import { b as StandardRPCHandler } from '../../shared/server.SxlTJfG2.mjs';
import '@orpc/client/standard';
import '../../shared/server.DG7Tamti.mjs';

class experimental_CrosswsHandler {
  constructor(standardHandler) {
    this.standardHandler = standardHandler;
  }
  peers = /* @__PURE__ */ new WeakMap();
  async message(ws, message, ...rest) {
    let peer = this.peers.get(ws);
    if (!peer) {
      this.peers.set(ws, peer = new ServerPeer(async (raw) => {
        if (raw instanceof Blob) {
          const buffer = await raw.arrayBuffer();
          ws.send(buffer);
        } else {
          ws.send(raw);
        }
      }));
    }
    const [id, request] = await peer.message(typeof message.rawData === "string" ? message.rawData : message.uint8Array());
    if (!request) {
      return;
    }
    const options = resolveFriendlyStandardHandleOptions(resolveMaybeOptionalOptions(rest));
    const { response } = await this.standardHandler.handle({ ...request, body: () => Promise.resolve(request.body) }, options);
    await peer.response(id, response ?? { status: 404, headers: {}, body: "No procedure matched" });
  }
  close(ws) {
    const server = this.peers.get(ws);
    if (server) {
      server.close();
      this.peers.delete(ws);
    }
  }
}

class experimental_RPCHandler extends experimental_CrosswsHandler {
  constructor(router, options = {}) {
    super(new StandardRPCHandler(router, options));
  }
}

export { experimental_CrosswsHandler, experimental_RPCHandler };
