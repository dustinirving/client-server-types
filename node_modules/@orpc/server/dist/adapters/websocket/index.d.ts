import { MaybeOptionalOptions } from '@orpc/shared';
import { C as Context, R as Router } from '../../shared/server.DPWk5pjW.js';
import { i as StandardHandler } from '../../shared/server.YZzrREz9.js';
import { F as FriendlyStandardHandleOptions } from '../../shared/server.BjiJH9Vo.js';
import { S as StandardRPCHandlerOptions } from '../../shared/server.Cy1vfSiG.js';
import '@orpc/client';
import '@orpc/contract';
import '@orpc/standard-server';
import '@orpc/client/standard';

declare class experimental_WebsocketHandler<T extends Context> {
    private readonly standardHandler;
    constructor(standardHandler: StandardHandler<T>);
    upgrade(ws: Pick<WebSocket, 'addEventListener' | 'send'>, ...rest: MaybeOptionalOptions<Omit<FriendlyStandardHandleOptions<T>, 'prefix'>>): void;
}

/**
 * RPC Handler for Websocket adapter
 *
 * @see {@link https://orpc.unnoq.com/docs/rpc-handler RPC Handler Docs}
 * @see {@link https://orpc.unnoq.com/docs/adapters/websocket Websocket Adapter Docs}
 */
declare class experimental_RPCHandler<T extends Context> extends experimental_WebsocketHandler<T> {
    constructor(router: Router<any, T>, options?: NoInfer<StandardRPCHandlerOptions<T>>);
}

export { experimental_RPCHandler, experimental_WebsocketHandler };
