import { resolveMaybeOptionalOptions } from '@orpc/shared';
import { ServerPeer } from '@orpc/standard-server-peer';
import { r as resolveFriendlyStandardHandleOptions } from '../../shared/server.BVwwTHyO.mjs';
import '@orpc/client';
import '@orpc/contract';
import { b as StandardRPCHandler } from '../../shared/server.SxlTJfG2.mjs';
import '@orpc/client/standard';
import '../../shared/server.DG7Tamti.mjs';

class experimental_WsHandler {
  constructor(standardHandler) {
    this.standardHandler = standardHandler;
  }
  async upgrade(ws, ...rest) {
    const peer = new ServerPeer(ws.send.bind(ws));
    ws.addEventListener("message", async (event) => {
      const [id, request] = await peer.message(new Blob(Array.isArray(event.data) ? event.data : [event.data]));
      if (!request) {
        return;
      }
      const options = resolveFriendlyStandardHandleOptions(resolveMaybeOptionalOptions(rest));
      const { response } = await this.standardHandler.handle({ ...request, body: () => Promise.resolve(request.body) }, options);
      await peer.response(id, response ?? { status: 404, headers: {}, body: "No procedure matched" });
    });
    ws.addEventListener("close", () => {
      peer.close();
    });
  }
}

class experimental_RPCHandler extends experimental_WsHandler {
  constructor(router, options = {}) {
    super(new StandardRPCHandler(router, options));
  }
}

export { experimental_RPCHandler, experimental_WsHandler };
