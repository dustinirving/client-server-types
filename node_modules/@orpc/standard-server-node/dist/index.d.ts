import { StandardBody, StandardHeaders, StandardLazyRequest, StandardResponse } from '@orpc/standard-server';
import { Readable } from 'node:stream';
import { IncomingMessage, ServerResponse } from 'node:http';
import { Http2ServerRequest, Http2ServerResponse } from 'node:http2';

declare function toEventIterator(stream: Readable): AsyncIteratorObject<unknown | void, unknown | void, void> & AsyncGenerator<unknown | void, unknown | void, void>;
interface ToEventStreamOptions {
    /**
     * If true, a ping comment is sent periodically to keep the connection alive.
     *
     * @default true
     */
    eventIteratorKeepAliveEnabled?: boolean;
    /**
     * Interval (in milliseconds) between ping comments sent after the last event.
     *
     * @default 5000
     */
    eventIteratorKeepAliveInterval?: number;
    /**
     * The content of the ping comment. Must not include newline characters.
     *
     * @default ''
     */
    eventIteratorKeepAliveComment?: string;
}
declare function toEventStream(iterator: AsyncIterator<unknown | void, unknown | void, void>, options?: ToEventStreamOptions): Readable;

type NodeHttpRequest = (IncomingMessage | Http2ServerRequest) & {
    /**
     * Replace `req.url` with `req.originalUrl` when `req.originalUrl` is available.
     * This is useful for `express.js` middleware.
     */
    originalUrl?: string;
};
type NodeHttpResponse = ServerResponse | Http2ServerResponse;

declare function toStandardBody(req: NodeHttpRequest): Promise<StandardBody>;
interface ToNodeHttpBodyOptions extends ToEventStreamOptions {
}
/**
 * @param body
 * @param headers - WARNING: The headers can be changed by the function and effects on the original headers.
 * @param options
 */
declare function toNodeHttpBody(body: StandardBody, headers: StandardHeaders, options?: ToNodeHttpBodyOptions): Readable | undefined | string;

declare function toStandardLazyRequest(req: NodeHttpRequest, res: NodeHttpResponse): StandardLazyRequest;

interface SendStandardResponseOptions extends ToNodeHttpBodyOptions {
}
declare function sendStandardResponse(res: NodeHttpResponse, standardResponse: StandardResponse, options?: SendStandardResponseOptions): Promise<void>;

declare function toAbortSignal(res: NodeHttpResponse): AbortSignal;

export { sendStandardResponse, toAbortSignal, toEventIterator, toEventStream, toNodeHttpBody, toStandardBody, toStandardLazyRequest };
export type { NodeHttpRequest, NodeHttpResponse, SendStandardResponseOptions, ToEventStreamOptions, ToNodeHttpBodyOptions };
