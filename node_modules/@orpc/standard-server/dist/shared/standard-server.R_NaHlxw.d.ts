interface StandardHeaders {
    [key: string]: string | string[] | undefined;
}
type StandardBody = undefined | unknown | Blob | URLSearchParams | FormData | AsyncIterator<unknown | void, unknown | void, undefined>;
interface StandardRequest {
    method: string;
    url: URL;
    headers: StandardHeaders;
    /**
     * The body has been parsed based on the content-type header.
     */
    body: StandardBody;
    signal: AbortSignal | undefined;
}
interface StandardLazyRequest extends Omit<StandardRequest, 'body'> {
    /**
     * The body has been parsed based on the content-type header.
     * This method can safely call multiple times (cached).
     */
    body: () => Promise<StandardBody>;
}
interface StandardResponse {
    status: number;
    headers: StandardHeaders;
    /**
     * The body has been parsed based on the content-type header.
     */
    body: StandardBody;
}
interface StandardLazyResponse extends Omit<StandardResponse, 'body'> {
    /**
     * The body has been parsed based on the content-type header.
     * This method can safely call multiple times (cached).
     */
    body: () => Promise<StandardBody>;
}

export type { StandardHeaders as S, StandardBody as a, StandardRequest as b, StandardLazyRequest as c, StandardResponse as d, StandardLazyResponse as e };
